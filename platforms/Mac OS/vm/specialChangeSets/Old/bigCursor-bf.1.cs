'From Squeak3.8 of ''5 May 2005'' [latest update: #6665] on 2 March 2007 at 12:20:22 am'!"Change Set:		bigCursor-bfDate:			2 March 2007Author:			Bert FreudenbergAdd support for big, colored cursors with alpha. New suppoort code needed:ioSetCursorARGB(cursorBitsIndex, extentX, extentY, offsetX, offsetY)"!!Interpreter methodsFor: 'I/O primitives' stamp: 'bf 3/2/2007 00:10'!primitiveBeCursor	"Set the cursor to the given shape. The Mac only supports 16x16 pixel cursors. Cursor offsets are handled by Smalltalk."	| cursorObj maskBitsIndex maskObj bitsObj extentX extentY depth offsetObj offsetX offsetY cursorBitsIndex ourCursor |	argumentCount = 0 ifTrue: [		cursorObj := self stackTop.		maskBitsIndex := nil].	argumentCount = 1 ifTrue: [		cursorObj := self stackValue: 1.		maskObj := self stackTop].	self success: (argumentCount < 2).	self success: ((self isPointers: cursorObj) and: [(self lengthOf: cursorObj) >= 5]).	successFlag ifTrue: [		bitsObj := self fetchPointer: 0 ofObject: cursorObj.		extentX := self fetchInteger: 1 ofObject: cursorObj.		extentY := self fetchInteger: 2 ofObject: cursorObj.		depth := self fetchInteger: 3 ofObject: cursorObj.		offsetObj := self fetchPointer: 4 ofObject: cursorObj].		self success: ((self isPointers: offsetObj) and: [(self lengthOf: offsetObj) >= 2]).	successFlag ifTrue: [		offsetX := self fetchInteger: 0 ofObject: offsetObj.		offsetY := self fetchInteger: 1 ofObject: offsetObj.		(argumentCount = 0 and: [depth = 32])			ifTrue: [				"Support arbitrary-sized 32 bit ARGB forms --bf 3/1/2007 23:51"				self success: ((extentX > 0) and: [extentY > 0]).				self success: ((offsetX >= (extentX * -1)) and: [offsetX <= 0]).				self success: ((offsetY >= (extentY * -1)) and: [offsetY <= 0]).				cursorBitsIndex := bitsObj + BaseHeaderSize.				self success: ((self isWords: bitsObj) and: [(self lengthOf: bitsObj) = (extentX * extentY)]).				self cCode: '' inSmalltalk:					[ourCursor := Cursor						extent: extentX @ extentY						depth: 32						fromArray: ((1 to: extentX * extentY) collect: [:i |							self fetchWord: i-1 ofObject: bitsObj])						offset: offsetX  @ offsetY]]			ifFalse: [				self success: ((extentX = 16) and: [extentY = 16 and: [depth = 1]]).				self success: ((offsetX >= -16) and: [offsetX <= 0]).				self success: ((offsetY >= -16) and: [offsetY <= 0]).				self success: ((self isWords: bitsObj) and: [(self lengthOf: bitsObj) = 16]).				cursorBitsIndex _ bitsObj + BaseHeaderSize.				self cCode: '' inSmalltalk:					[ourCursor := Cursor						extent: extentX @ extentY						fromArray: ((1 to: 16) collect: [:i |							((self fetchWord: i-1 ofObject: bitsObj) >> 16) bitAnd: 16rFFFF])						offset: offsetX  @ offsetY]]].	argumentCount = 1 ifTrue: [		self success: ((self isPointers: maskObj) and: [(self lengthOf: maskObj) >= 5]).		successFlag ifTrue: [			bitsObj := self fetchPointer: 0 ofObject: maskObj.			extentX := self fetchInteger: 1 ofObject: maskObj.			extentY := self fetchInteger: 2 ofObject: maskObj.			depth := self fetchInteger: 3 ofObject: maskObj].		successFlag ifTrue: [			self success: ((extentX = 16) and: [extentY = 16 and: [depth = 1]]).			self success: ((self isWords: bitsObj) and: [(self lengthOf: bitsObj) = 16]).			maskBitsIndex := bitsObj + BaseHeaderSize]].	successFlag ifTrue: [		argumentCount = 0			ifTrue: [				depth = 32					ifTrue: [(self cCode: 'ioSetCursorARGB(cursorBitsIndex, extentX, extentY, offsetX, offsetY)'						inSmalltalk: [ourCursor show. Cursor currentCursor == ourCursor])								ifFalse: [^self success: false]]					ifFalse: [self cCode: 'ioSetCursor(cursorBitsIndex, offsetX, offsetY)'						inSmalltalk: [ourCursor show]]]			ifFalse: [self cCode: 'ioSetCursorWithMask(cursorBitsIndex, maskBitsIndex, offsetX, offsetY)'						inSmalltalk: [ourCursor show]].		self pop: argumentCount].! !