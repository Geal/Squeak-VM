#! /bin/sh
#
# mkMake - generate most of the Makefile; the rest is in Makefile.in
#
# The first argument to the script should be the top of the VMMaker
# build directory -- eg, it should have "platforms" as an immediate
# subdirectory.
#
# $Id: mkMake,v 1.1 2002/01/20 20:30:11 lexspoon Exp $
#


# give names to the various directories being used
srcdir=$1
vmdir=$srcdir/vm
plugdir=$srcdir/plugins
intplugdir=$srcdir/intplugins



## generate a warning for anyone reading the target file
echo "### automatically generated by $0"
echo ""


## generate rules for core source files

CORE_C=`find $vmdir -name '*.c' ! -name interp.c -print`

for corefile_c in $CORE_C
do
    corefile_o=`basename $corefile_c | sed -e s/c\$/o/`
    CORE_O="$CORE_O $corefile_o"

    echo "$corefile_o: $corefile_c"
    echo "	\$(COMPILE) -o $corefile_o -c $corefile_c"
    echo ""
done

echo "CORE_O=$CORE_O"
echo ""



## generate rules for internal plugins

if [ -d $intplugdir ]
then
    intplugins=`ls $intplugdir`
else
    intplugins=""
fi


for plugin in $intplugins
do
    mkdir $plugin 2> /dev/null

    if [ -x $intplugdir/$plugin/mkMakeRules ]
    then
        # this plugin knows how to compile itself
        $intplugdir/$plugin/mkMakeRules $srcdir internal
    else
        # compile with default rules
        THIS_PLUGIN_O=""
        THIS_PLUGIN_EXTRA_INC="-I$intplugdir/$plugin"

	# find the source files for this plugin
        THIS_PLUGIN_C=`find $intplugdir/$plugin -type f -name \*.c -print`

     

	# print out rules for compiling each C file in the plugin
        for file_c in $THIS_PLUGIN_C
        do
            file_o="$plugin/"`basename $file_c | sed -e s/c\$/o/`
            THIS_PLUGIN_O="$THIS_PLUGIN_O $file_o"
            echo "$file_o : $file_c"
            echo "	\$(COMPILE) $THIS_PLUGIN_EXTRA_INC -o $file_o -c $file_c"
            echo ""
        done

        # mark this plugin's files for inclusion in the main VM executable
        PLUGINS_O="$PLUGINS_O $THIS_PLUGIN_O"
    fi
done

echo "PLUGINS_O:=\$(PLUGINS_O) $PLUGINS_O"
echo ""


## generate rules for external plugins

if [ -d $plugdir ]
then
    extplugins=`ls $plugdir`
else
    extplugins=""
fi

for plugin in $extplugins
do
    MOD_LA="$MOD_LA $plugin.la"
    mkdir $plugin 2> /dev/null

    if [ -x $plugdir/$plugin/mkMakeRules ]
    then
        # this plugin knows how to compile itself
        $plugdir/$plugin/mkMakeRules $srcdir external
    else
        # compile with default rules
        THIS_PLUGIN_O=""
        THIS_PLUGIN_EXTRA_INC="-I$plugdir/$plugin"

	# find the source files for this plugin
        THIS_PLUGIN_C=`find $plugdir/$plugin -type f -name \*.c -print`

     

	# print out rules for compiling each C file in the plugin
        for file_c in $THIS_PLUGIN_C
        do
            file_o="$plugin/"`basename $file_c | sed -e s/c\$/lo/`
            THIS_PLUGIN_O="$THIS_PLUGIN_O $file_o"
            echo "$file_o : $file_c"
            echo "	\$(LTCOMPILE) $THIS_PLUGIN_EXTRA_INC -o $file_o -c $file_c"
            echo ""
        done

        # print out rules for linking the plugin together
        echo "$plugin.la : $THIS_PLUGIN_O"
	echo "	\$(LINK) -module -rpath \$(sqlibdir) -o $plugin.la $THIS_PLUGIN_O"
        echo ""
    fi
done

echo "MOD_LA=$MOD_LA"
echo ""


# inform any  reader that the automatic part is over
echo '### end of part generated by mkMake'