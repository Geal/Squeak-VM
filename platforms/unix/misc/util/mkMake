#! /bin/sh
#
# mkMake - generate most of the Makefile; the rest is in Makefile.in
#
# The first argument to the script should be the top of the VMMaker
# build directory -- eg, it should have "platforms" as an immediate
# subdirectory.
#
# $Id: mkMake,v 1.7 2002/03/07 06:24:48 lexspoon Exp $
#


# give names to the various directories being used
topdir=$1
srcdir=$topdir/src
gendir=$srcdir
unixdir=$topdir/platforms/unix
crossdir=$topdir/platforms/Cross


### makefile rule generation; Let's leave as many as possible up here,
### in order to keep this script as readable as possible.
# print out a makefile rule to compile one C file into another.
# $1 -- destination file
# $2 -- source file
# $3,$4, etc. -- any extra flags
#
compilationRule() {
    destfile="$1"
    srcfile="$2"
    shift
    shift
    cat <<EOF
$destfile : $srcfile
	\$(COMPILE) -o $destfile -c $srcfile $*

EOF
}



# print out a makefile rule for substituting variables in a man page
# $1 -- destination file, with substitutions
# $2 -- source file
manpageRule() {
    destfile=$1
    srcfile=$2

    cat <<EOF
$destfile : $srcfile
	sed '\
s,{vsqdatadir},\$(vsqdatadir),g;\\
s,{sqdatadir},\$(sqdatadir),g;\\
s,{vsqlibdir},\$(vsqlibdir),g;\\
s,{sqlibdir},\$(sqlibdir),g;\\
s,{bindir},\$(bindir),g;\\
s,{docdir},\$(docdir),g;\\
s,{mandir},\$(man1dir),g;\\
s,{version},\$(VERSION),g;\\
s,{major},\$(MAJOR),g;' < $srcfile > $destfile

EOF
}



### functions used to automatically search for C files to include

# pickfile -- given a filename F and a list of directories, choose
#             the version of F in the earliest directory listed
pickfile() {
    name=$1
    shift
    while [ ! -f $1/$name ]
    do
        shift
    done
    echo $1/$name
}




# cFileBaseNames -- find all C files in any of the directories in $1,
#                   $2, $3, etc., but don't list the directory name.
#                   Also, don't list duplicates
cFileBaseNames() {
    # search through each directory, to find 
    rawBaseNames=""
    while [ "x$1" != "x" ]
    do
        if [ -d $1 ]
        then
            newBaseNames=`(cd $1; find . -name '*.c' -print)`
	    rawBaseNames="$rawBaseNames $newBaseNames"
        fi
	shift
    done

    fileBaseNames=`for f in $rawBaseNames; do echo $f; done`
    fileBaseNames=`echo "$fileBaseNames" | sort | uniq | cut -c 3-`
  

    echo $fileBaseNames
}


# given a list of directories, find all C files.  If a file with the
# same name exists in multiple directories, pick the file in the
# directory listed earlier
cFilesToCompile() {
    for baseName in `cFileBaseNames "$@"`
    do
        pickfile $baseName "$@"
    done
} 



# prune header files that are overriden
# $1, $2, etc.  directories to find header files
pruneOverridenHeaders() {
    basenames=`find "$@" -maxdepth 1 '(' -name '*.h' -o -name 'platform.exports' ')' -exec basename '{}' ';' | sort | uniq`
echo basenames: $basenames
    for header in $basenames
    do
	pickedheader=`pickfile $header "$@"`
	for dir in "$@"
	do
	    if [ -f $dir/$header  -a $dir/$header != $pickedheader ]
	    then
		echo "Removing $dir/$header..."
		rm -f $dir/$header
	    fi
	done
    done
}


## kill overriden headers, so they don't accidentally get picked up
## (-I ordering is insufficient in the face of "" includes)
pruneOverridenHeaders . $unixdir/vm $unixdir/misc $crossdir/vm $srcdir/vm


## generate a warning for anyone reading the target file
echo "### automatically generated by $0"
echo ""


## generate rules for core source files

CORE_C=`cFilesToCompile $unixdir/vm $crossdir/vm $srcdir/vm | grep -v intplugins | grep -v interp.c`

for corefile_c in $CORE_C
do
    corefile_o=`basename $corefile_c | sed -e s/c\$/o/`
    CORE_O="$CORE_O $corefile_o"

    compilationRule $corefile_o $corefile_c
done

echo "CORE_O=$CORE_O"
echo ""



## generate rules for internal plugins

# XXX currently, these search rules don't handle subdirectories with
# files of the same name; the location of the target .o file isn't
# selected carefully.  This is true for both internal and external
# automatic rules.  On the other hand, is a plugin that's amenable
# to automatic rules, going to have multiple directories?!

if [ -d $srcdir/vm/intplugins ]
then
    intplugins=`ls $srcdir/vm/intplugins`
else
    intplugins=""
fi


for plugin in $intplugins
do
    mkdir $plugin 2> /dev/null

    if [ -x $unixdir/plugins/$plugin/mkMakeRules ]
    then
        # this plugin knows how to compile itself
        $unixdir/plugins/$plugin/mkMakeRules $topdir internal
    else
        # compile with default rules
        THIS_PLUGIN_O=""
        THIS_PLUGIN_EXTRA_INC="-I$unixdir/plugins/$plugin -I$crossdir/plugins/$plugin -I$srcdir/vm/intplugins/$plugin"

	# find the source files for this plugin
        THIS_PLUGIN_C=`cFilesToCompile $unixdir/plugins/$plugin $crossdir/plugins/$plugin $srcdir/vm/intplugins/$plugin`

	# print out rules for compiling each C file in the plugin
        for file_c in $THIS_PLUGIN_C
        do
            file_o="$plugin/"`basename $file_c | sed -e s/c\$/o/`
            THIS_PLUGIN_O="$THIS_PLUGIN_O $file_o"
	    compilationRule $file_o $file_c $THIS_PLUGIN_EXTRA_INC
        done

        # mark this plugin's files for inclusion in the main VM executable
        PLUGINS_O="$PLUGINS_O $THIS_PLUGIN_O"
    fi
done

echo "PLUGINS_O:=\$(PLUGINS_O) $PLUGINS_O"
echo ""


## generate rules for external plugins

if [ -d $srcdir/plugins ]
then
    extplugins=`ls $srcdir/plugins`
else
    extplugins=""
fi

for plugin in $extplugins
do
    MOD_LA="$MOD_LA $plugin.la"
    mkdir $plugin 2> /dev/null

    if [ -x $unixdir/plugins/$plugin/mkMakeRules ]
    then
        # this plugin knows how to compile itself
        $unixdir/plugins/$plugin/mkMakeRules $topdir external
    else
        # compile with default rules
        THIS_PLUGIN_O=""
        THIS_PLUGIN_EXTRA_INC="-I$unixdir/plugins/$plugin -I$crossdir/plugins/$plugin -I$srcdir/plugins/$plugin"

	# find the source files for this plugin
        THIS_PLUGIN_C=`cFilesToCompile $unixdir/plugins/$plugin $crossdir/plugins/$plugin $srcdir/plugins/$plugin`
     

	# print out rules for compiling each C file in the plugin
        for file_c in $THIS_PLUGIN_C
        do
            file_o="$plugin/"`basename $file_c | sed -e s/c\$/lo/`
            THIS_PLUGIN_O="$THIS_PLUGIN_O $file_o"
	    compilationRule $file_o $file_c $THIS_PLUGIN_EXTRA_INC
        done

        # print out rules for linking the plugin together
        echo "$plugin.la : $THIS_PLUGIN_O"
	echo "	\$(LINK) -module -rpath \$(sqlibdir) -o $plugin.la $THIS_PLUGIN_O"
        echo ""
    fi
done

echo "MOD_LA=$MOD_LA"
echo ""


# rule for misc files
compilationRule interp.o $gendir/vm/interp.c
compilationRule gnu-interp.o gnu-interp.c
compilationRule sqUnixVersion.o sqUnixVersion.c 




## man pages
MANPAGES=""
for srcpage in $unixdir/misc/*.[1-9]*.in
do
    destpage=`basename $srcpage | sed -e 's/\.in$//'`
    manpageRule $destpage $srcpage
    MANPAGES="$MANPAGES $destpage"
done
echo "MANPAGES=$MANPAGES"
echo ""


## automatic rebuilding of the makefile
cat <<EOF
update:
	$0 $* > make_auto
	./config.status Makefile
EOF

### inform any  reader that the automatic part is over
echo '### end of part generated by mkMake'