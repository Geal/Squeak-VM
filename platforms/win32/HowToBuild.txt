How to build a new Windows VM
-----------------------------

This document describes how to build a new Windows VM based on the "new" ('06) 
build structure. It is not applicable to the "old" pre-06 structure.

Index:

1. Prerequisites
1.1 Tool chain
1.2 Platform tree
1.3 Image
1.4 VMMaker

2. Generating a new VM
2.1 Decide where to build your VM
2.2 Generate a VM from VMMaker
2.3 Sanity check

3. Customization
3.1 VM Name
3.2 Icons etc.

4. Compiling the VM


1. Prerequisites
================
For building a new VM you will need various bits and pieces.

1.1 Tool chain
--------------
Grab the tool chain from
    http://squeakvm.org/win32/release/Squeak-Win32-Tools-1.2.zip
and extract its entire contents into the C: directory.
Other locations work as well but may require adjustments to the makefiles
which are beyond the scope of this document.

1.2 Platform tree
-----------------
If you just want to recompile an existing VM version, simply grab the source
bits from SqueakVM.org, e.g., get the appropriate 
  http://squeakvm.org/win32/release/Squeak-Win32-X.Y.Z-src.zip
file. This will contain everything you need to recompile the specific version
and will be tremendously helpful for debugging etc.

If you want to do some of your own development you may instead check out the
platform tree from SqueakVM.org via
  svn co http://squeakvm.org/svn/squeak/trunc platforms
and work from there. If you do this be advised of the following

**** WARNING ****: Working from the HEAD of the SVN repository will almost 
certainly require additional work. That's because the VM maintainers work 
at different schedules and one maintainer's modification at HEAD may break 
another VM. If you want to make sure the VM compiles out of the box, USE 
A FILE RELEASE.

1.3 Image
---------
[This step is OPTIONAL if you only want to recompile an existing VM]

Grab a functioning image from an appropriate place, say
  http://ftp.squeak.org
  http://opencroquet.org
depending on whether you want to build a Squeak or Croquet VM.

1.4 VMMaker
-----------
[This step is OPTIONAL if you only want to recompile an existing VM]

Make sure you have VMMaker in that image; if you don't load it via SqueakMap

***** IMPORTANT ***** 
Check that you have a VMMaker version that is applicable for this build 
structure. The best way to check this is to open a browser and see whether
Win32VMMaker is a subclass of VMMakerWithFileCopying or just plain old
VMMaker. If the latter (i.e., VMMaker subclass: #Win32VMMaker) leave
everything is as is. If the former (i.e., VMMakerWithFileCopying subclass: 
#Win32VMMaker) do the following:
- REMOVE Win32VMMaker completely. Yes, NUKE IT.
- LOAD Win32VMMaker from the build directory of the C support code:
  platforms/win32/build/Win32VMMaker.st

2. Generating a new VM
======================
[This step is OPTIONAL if you only want to recompile an existing VM]

2.1 Decide where to build your VM
---------------------------------
[This step is OPTIONAL if you only want to recompile an existing VM]

If you just want to rebuild the VM use the build location provided by the
file release you are using. If you do your own development you need to decide
where to put the build files. You have two choices:
a) Use the platforms/win32/build directory. The advantage is that the location
is what is being used by the Makefiles and will work out of the box. The 
disadvantage is that this directory is backed by the squeakvm.org repository
(as is the entire path) and may be problematic if you need to maintain your
own repository.
b) Use your own build directory outside of the platforms tree. This is the
approach that is used for all of the release builds, simply because it makes 
a clear separation between the (static) platforms tree and the generated
and build tree. To set this up you should:
- Copy the contents of platforms/win32/build to your build location
- Adjust PLATDIR in build/Makefile to point to the platforms directory
(see one of the win32 release builds for an example)

2.2 Generate a VM from VMMaker
------------------------------
[This step is OPTIONAL if you only want to recompile an existing VM]

Open VMMaker from the world menu and provide it with the path to the platforms 
code. Assuming you've put the platforms tree into C:\SqueakVM\ this would be 
C:\SqueakVM\platforms. You also need to provide the path to the generated 
sources, which should be the src directory inside your build directory, e.g.,
either
  C:\SqueakVM\platforms\win32\build\src (default build location)
  C:\SqueakVM\mybuild\src (custom build location in C:\SqueakVM\mybuild)
**** NOTE ****: If you can't seem to change the path to the generated sources,
go back to step 1.4 and make sure you've got the right version of Win32VMMaker.

Next, customize VMMaker for the plugins you'd like to have internal vs.
external. Generally, the release builds have "everything builtin" except 
from the FFI plugin (SqueakFFIPrims). Some plugins (as of this time of writing
FileCopyPlugin, InternetConfigPlugin, MacMenuBarPlugin, and TestOSAPlugin)
cannot be built on Windows. If you have a large number of plugins that can't
be made either internal or external, your paths are most likely incorrect.

Finally, generate the entire sources for the build.

2.3 Sanity check
----------------
[This step is OPTIONAL if you only want to recompile an existing VM]

Make sure you have a sane build setup before going on. Your directories
should look roughly like this (assuming C:\SqueakVM\ is the root of the 
installation):
C:\SqueakVM\platforms - the platform tree originating from squeakvm.org
C:\SqueakVM\platforms\Cross - the cross platform files (required)
C:\SqueakVM\platforms\win32 - the win32 platform files (required)

C:\SqueakVM\mybuild - the build tree (may differ if you use another location)
C:\SqueakVM\mybuild\src - the place for generated sources
C:\SqueakVM\mybuild\vm - the core vm sources
C:\SqueakVM\mybuild\XYZPlugin - the sources for XYZPlugin

3. Customization
================
[This step is OPTIONAL if you only want to recompile an existing VM]

If you need a custom VM, the build process is also a great place to add a few
customizations.

3.1 VM Name
-----------
[This step is OPTIONAL if you only want to recompile an existing VM]

In the Makefile (in your build directory) change the VM definition to, e.g.,

  VM = MyCustomVM

This will change various VM related settings to use your name, including
titles for quit messages etc.

3.2 Icons etc.
-------------
[This step is OPTIONAL if you only want to recompile an existing VM]

With this process you can also customize icons and other resources. Merely
provide a .rc file called MyCustomVM.rc and add the appropriate resources.
Have a look at Squeak.rc or Croquet.rc which are provided as examples.

4. Compiling the VM
===================

After following the above steps, cd into the build directory and invoke make.
If you've followed the above instructions, you should be rewarded with a
brand new VM.

