/*------------------------------------------------------------
| NAME: TLModes.h
|-------------------------------------------------------------
|
| PURPOSE: To provide interface to general operating mode 
|          functions.
|
| DESCRIPTION: 
|
| NOTE: 
|
| HISTORY: 02.01.94
------------------------------------------------------------*/

#ifndef _MODES_H_
#define _MODES_H_

#ifndef WindowRecord
#include <Windows.h> // For Release 3: <MacWindows.h>
#endif

#ifndef ControlHandle
#include <Controls.h>
#endif

#define WaitNextEventSleepTime  60 // was 2
                // A short sleeping time so that cursor
                // will blink.
                

#define MaxModeDepth       20
        // Limits how deep modes can be nested.
        
#define MaxEventDepth      10*6 // 6 items per event are stacked.
        // Limits how deep events can be nested.
        
// Used to hold a set of event processing procedures. 
// Each mode may have it's own set.

// See p. 2-79 of IM Toolbox Essentials.
typedef struct EventTableRecord
{
    AnyProcedure    DoNullEvent; //  0 nullEvent   null event 
    AnyProcedure    DoMouseDown; //  1 mouseDown   mouse down 
    AnyProcedure    DoMouseUp;   //  2 mouseUp     mouse up  
    AnyProcedure    DoKeyDown;   //  3 keyDown     key down 
    AnyProcedure    DoKeyUp;     //  4 keyUp       key up 
    AnyProcedure    DoAutoKey;   //  5 autoKey     auto key 
    AnyProcedure    DoUpdate;    //  6 updateEvt   update 
    AnyProcedure    DoDisk;      //  7 diskEvt     disk-inserted 
    AnyProcedure    DoActivate;  //  8 activateEvt activate/deactivate 
    AnyProcedure    DoUnDef9;    //  9 Undefined and reserved.
    AnyProcedure    DoUnDef10;   // 10 Undefined and reserved.
    AnyProcedure    DoUnDef11;   // 11 Undefined and reserved.
    AnyProcedure    DoUnDef12;   // 12 Undefined and reserved.
    AnyProcedure    DoUnDef13;   // 13 Undefined and reserved.
    AnyProcedure    DoUnDef14;   // 14 Undefined and reserved.
    AnyProcedure    DoOSEvent;   // 15 osEvt       resume, suspend or
                                 //                mouse moved.
    AnyProcedure    DoUnDef16;   // 16 Undefined and reserved.
    AnyProcedure    DoUnDef17;   // 17 Undefined and reserved.
    AnyProcedure    DoUnDef18;   // 18 Undefined and reserved.
    AnyProcedure    DoUnDef19;   // 19 Undefined and reserved.
    AnyProcedure    DoUnDef20;   // 20 Undefined and reserved.
    AnyProcedure    DoUnDef21;   // 21 Undefined and reserved.
    AnyProcedure    DoUnDef22;   // 22 Undefined and reserved.
    AnyProcedure    DoHighLevel; // 23 'kHighLevelEvent' 
} EventTable;
        
// Operating Mode Interpreters

typedef struct ModeRecord
{
    u32         ModeID;
    EventTable*     ModeEventTable;
                            // How to interpret input
                            // in this context.
                            
    AnyProcedure    DoModeCyclic;
                            // What do to periodically
                            // in this mode.
                            
    AnyProcedure    DoEnterMode;
                            // What to do when entering
                            // this mode.
                            
    AnyProcedure    DoSuspendMode;
                            // What to do when suspending
                            // this mode.
                            
    AnyProcedure    DoResumeMode;
                            // What to do when resuming
                            // this mode.
                            
    AnyProcedure    DoExitMode;
                            // What to do when leaving
                            // this mode.
                            
} Mode;

extern u32      IsEndOfEventLoop;
                // When true, the event loop terminates.

extern u32      IsEvent;
                // 1 if there is a valid event in the event
                // buffer and variables.
                

extern u32      IsInForegroundMode;
                // 1 if this application is active, 0 if some
                // other application is active.

extern u32      IsKeyDown;
                // 1 if a Keydown or AutoKey event just occurred, 
                // 0 otherwise.

extern  u32     IsSys7SimulatedEvent;
                // When true, the event is a simulated user action
                // generated by Sys7.

extern u32      IsWaitNextEventAvailable;
                // If the WaitNextEvent feature is available,
                // this will be non-zero.

extern u32      TheMode;
                // The current operating mode.

extern s32      TheModeStartTime;
                // When the current operating mode started in 
                // ticks from when the computer turned on.
                // From the system variable 'Ticks'.
                // A 'tick' is a sixtieth of a second.

extern u32      LastButton;
                // Button ID of the last button activated by user.

extern s32      TheMenuResult;
                // The menu result code for the last selected menu item
                // or command key equivalent.

extern s16      TheMenuItem;
                // The item ID number for the last selected menu item
                // or command key equivalent.

extern s16      TheMenuID;
                // The menu ID code for the last selected menu item
                // or command key equivalent.

extern Mode     TheModeTable[];
                // Where operating modes are defined.
                // Each application will have its own.

extern Stack*   TheModeStack;

extern AnyProcedure TheCycleInterpreter;
                // Holds the address of the current procedure
                // used to maintain the current operating
                // context on each pass through the event
                // loop.
                 
extern AnyProcedure * TheEventTable;
                // Holds the address of the current event
                // table used to interpret events in the 
                // current operating context on each pass 
                // through the event loop.

extern AnyProcedure TheMenuUpdateProcedure;
                // Holds the address of the current procedure
                // used to update the menus when they are
                // picked.

// This is where all events go as they come in.

extern EventRecord  TheEvent;

// Global variables used to hold the most recent event. 
// This mainly for ease of reference and speed.         

extern Point    TheMouseLocation;
extern s16      TheMouseX;
extern s16      TheMouseY;
extern s16      TheEventModifiers;
extern s16      TheEventType;
extern s32      TheEventMessage;
extern s32      TheEventTime;
extern s8       TheKey;

extern WindowPtr        TheEventWindow;
                        // Window containing the event, OS-specific
                
extern Window*          TheEventWindowOSGeneric;
                        // Window containing the event, OS-generic.
                
extern s16              TheWindowPart;
                        // The part of the window where the event
                        // occurred.

extern ControlHandle    TheControl;
                        // The control at the mouse.

extern s16              TheControlPart;
                        // The part of the control where the event
                        // occurred.

extern  s16             TheDialogItemHit;
                        // This is the item number of the last
                        // dialog item selected.

extern  u32             IsInDialog;
                        // 1 if the last button down was in
                        // a dialog window.
                     
extern  u32             IsDialogItemHit;
                        // 1 if the last button down hit an
                        // enabled dialog item.

extern  u32             IsInMenuBar;
                        // 1 if the last button down was in
                        // the menu bar.

extern  u32             IsCommandKey;
                        // 1 if the last key down was a
                        // command key.

void    ChangeToMode( u32 );
void    CleanUpModeSystem();
void    DoDebugExit();
void    DoHighLevelEvent();
void    DoNothing();
void    EnterMode( u32 );
void    EnterSubMode( u32 );
void    ExitMode();
void    ExitSubMode();
s32     GetModeAge();
void    GetPendingEvent();
void    PreProcessDialogEvent();
void    PreProcessKeyEvent();
void    ProcessPendingEvent();
void    ProcessPendingEventEverySecond();
void    ProcessPendingEvents();
void    PullEvent();
void    PushEvent();
void    ResumeMode();
void    SetUpModeSystem();
void    SimulateActivateEvent( WindowPtr );
void    SimulateDeactivateEvent( WindowPtr );
void    SimulateKeyDownEvent( u16, u16 );
void    SuspendMode();
void    TheEventLoop();
void    UpdateMenus();

/*------------------------------------------------------------
| NAME: SomeMode
|
| PURPOSE: To describe some mode.
|
| DESCRIPTION: 
|
| On Mouse Button Down: 
|
| Buttons: 
|
| Menus: 
|
| Keys: 
|
| EXAMPLE:   
|
| NOTE: 
|
| ASSUMES:  
|
| HISTORY: 
|
------------------------------------------------------------*/

#endif

